package riw;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Nassim Guergouri
 */
public class Interface extends javax.swing.JFrame {

    /**
     * Creates new form Interface
     */
     ArrayList<TokenElement> Token;
     ArrayList<TokenElement> Bigram;
     String[][] file_name;
    public static final String UTF8_BOM = "\uFEFF";
    public Interface() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        creer = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        requete = new javax.swing.JButton();
        creer1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Indexs");
        setLocation(new java.awt.Point(150, 100));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "List Postage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setEnabled(false);
        jTable1.setRowHeight(25);
        jTable1.setRowMargin(5);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        creer.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        creer.setText("Création Index Inversé");
        creer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                creerMouseClicked(evt);
            }
        });

        Reset.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Reset.setText("Reset");
        Reset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ResetMouseClicked(evt);
            }
        });

        requete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        requete.setText("Entrer Requete");
        requete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                requeteMouseClicked(evt);
            }
        });

        creer1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        creer1.setText("Création Index Bi-Gram");
        creer1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                creer1MouseClicked(evt);
            }
        });

        jTable2.setAutoCreateRowSorter(true);
        jTable2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "List Postage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.setEnabled(false);
        jTable2.setRowHeight(25);
        jTable2.setRowMargin(5);
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jTable2);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Index Inversé");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Index Bi-Gram");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(creer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(creer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Reset, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(requete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(76, 76, 76))
            .addGroup(layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(324, 324, 324))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(creer, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(creer1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void creerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_creerMouseClicked
        // TODO add your handling code here:
        // Varible qui contient index inversé
        Token = new ArrayList<TokenElement>();
        Bigram = new ArrayList<TokenElement>();
        // Charger fichier du mots vide
        File stop_word = new File("E:\\Stop Words\\stopwords_français.txt");
    BufferedReader read_word;
        try {
            read_word = new BufferedReader(new FileReader(stop_word.getPath()));
    // Création tableau qui contient les mots vides    
    ArrayList  stop_words = new ArrayList<String>();
   String ligne = "";
    
    try {
        while((ligne=read_word.readLine())!=null){
            stop_words.add(ligne);
        }} catch (IOException ex) {
        Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
    }
    
       //Lecture tout les fichiers corpus
    String chemin_repert = "E:\\Corpus";// Répertoire où les corpus sont stockés
    File repert = new File(chemin_repert);
    File[] files = repert.listFiles();
    file_name = new String[files.length][2];
            int id_file = -1;
        for (File f : files) {
            id_file++;
            if(f.isFile()) {
              Scanner read_corpus = new Scanner(new FileInputStream(f),"UTF-8");
              
               //Lecture corpus
             while(read_corpus.hasNext())
              {
                  boolean trouve=true;
                  String word = read_corpus.next();
                  // Normalisation casse Miniscule
                  word = word.toLowerCase();
                  
                String[] line_nv = word.split("[\\p{Punct}\\s «»]+");//supprimer la ponctuation
                  
                    // Chercher s'il y a des mots vides dans la ligne
                   for (int k=0;k<line_nv.length;k++){
                         for(int i=0;i<stop_words.size();i++){
                         if(line_nv[k].equals(stop_words.get(i))|| line_nv[k].equals("")){
                          trouve=false;
                      }
                    }
                      line_nv[k] = removeUTF8BOM(line_nv[k]);
                      
                  if(trouve)// supprimer les mots vides si on les trouve
                  {
                      // Récupérer identifiant fichier
                      String idfile_s = (f.getName()).split("\\p{Punct}")[0];
                      
                      file_name[id_file][0]= String.valueOf(id_file+1);
                      file_name[id_file][1]=idfile_s;
                      String idfile = String.valueOf(id_file+1);
                      // Tester si le token existe dans la liste
                      int ans = existe_Token(Token,line_nv[k]);
                      // Ajouter Token dans la liste avec son document
                      if(ans == -1){
                          DocElement new_doc = new DocElement(idfile,null); 
                          TokenElement nouveltoken = new TokenElement(line_nv[k],new_doc);
                          Token.add(nouveltoken);
                          
                          // Création des Bigram
                          char[] gram = line_nv[k].toCharArray();
                          DocElement new_gram;
                          if(gram.length==1){
                             new_gram= new DocElement(gram[0]+"",null);  
                          }else{
                             new_gram = new DocElement(gram[0]+""+gram[1],null);}
                          TokenElement new_tgram = new TokenElement(line_nv[k],new_gram);
                          Bigram.add(new_tgram);
                          if(gram.length!=1){
                            for(int i = 1;i+1<line_nv[k].length();i++){
                              Bigram = addDoc(Bigram,gram[i]+""+gram[i+1],Bigram.size()-1);
                            }
                          }
                          
                      }
                      // Token existe dans la liste
                      else{
                          // Tester si document qui contient le token existe dans la liste
                          if(!existe_Doc(Token,idfile,ans)){
                              // Ajouter Token
                             Token = addDoc(Token,idfile,ans); 
                          }
                      }
                      }
                 trouve = true; 
              }
              }
            }
        }
        // Création table Index inversé
        Iterator iter = Token.iterator();
        while(iter.hasNext()){
            TokenElement tok_ele = (TokenElement)iter.next();
            String tokken = tok_ele.getValue();
            DocElement doc_ele = tok_ele.getFirst();
            String file_id = doc_ele.getValue()+"   ";
            doc_ele = doc_ele.getNext();
            while(doc_ele!=null){
                file_id = file_id+doc_ele.getValue()+"  ";
                doc_ele = doc_ele.getNext();
            }
         
        DefaultTableModel model = (DefaultTableModel) getjTable1().getModel();
        model.addRow(new Object[]{tokken,file_id});
            
        }
       
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_creerMouseClicked

    public JButton getCreer1() {
        return creer1;
    }

    public void setCreer1(JButton creer1) {
        this.creer1 = creer1;
    }

    public JTable getjTable2() {
        return jTable2;
    }

    public void setjTable2(JTable jTable2) {
        this.jTable2 = jTable2;
    }

    private void ResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResetMouseClicked
        // TODO add your handling code here:
      getjTable1().setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "List Postage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };});
      getjTable2().setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "List Postage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };});
    }//GEN-LAST:event_ResetMouseClicked

    private void requeteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_requeteMouseClicked
        // TODO add your handling code here:
        new Requete(Token,file_name).setVisible(true);
    }//GEN-LAST:event_requeteMouseClicked

    private void creer1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_creer1MouseClicked
        // TODO add your handling code here:
        // création table Bi-Gram
         Iterator iter1 = Bigram.iterator();
       while(iter1.hasNext()){
            TokenElement tok_ele = (TokenElement)iter1.next();
            String tokken = tok_ele.getValue();
            DocElement doc_ele = tok_ele.getFirst();
            String file_id = doc_ele.getValue()+"   ";
            doc_ele = doc_ele.getNext();
            while(doc_ele!=null){
                file_id = file_id+doc_ele.getValue()+"  ";
                doc_ele = doc_ele.getNext();
            }
         
        DefaultTableModel model = (DefaultTableModel) getjTable2().getModel();
        model.addRow(new Object[]{tokken,file_id});
            
        }
        
    }//GEN-LAST:event_creer1MouseClicked

// Fonction qui permet de tester si un token existe dans la liste 
public static int existe_Token(ArrayList<TokenElement> list,String token){
    Iterator iter = list.iterator();int i=0,pos=0; 
    boolean trouve = false;
    while(iter.hasNext()){
        TokenElement element = ((TokenElement) iter.next());
        if(token.equals(element.getValue())) 
        {
            trouve = true;pos = i;}
        i++;
    }
    // Si trouver retourne sa position
    if(trouve) return pos;else
  return -1; 
}

// Fonction qui permet de tester si un document existe dans un liste pour un token donner
public static boolean existe_Doc(ArrayList<TokenElement> list,String doc,int pos){
    DocElement first_doc = (list.get(pos)).getFirst();
    if(first_doc.getValue().equals(doc))return true;
    else{
        first_doc = first_doc.getNext();
        
    while(first_doc!=null){
        if(first_doc.getValue().equals(doc))return true;
        first_doc = first_doc.getNext();
    }
    }
    return false;
}

// Fonction qui permet d'ajouter un document a un token dans la liste
public static ArrayList<TokenElement> addDoc(ArrayList<TokenElement> list,String doc,int pos){
    DocElement new_doc = new DocElement(doc,null);
    
    DocElement temp = list.get(pos).getFirst();
    while(temp.getNext()!=null){
        temp = temp.getNext();
    }
    temp.setNext(new_doc);
    return list;
}

public static String removeUTF8BOM(String s) {
        if (s.startsWith(UTF8_BOM)) {
            s = s.substring(1);
        }
        return s;
    }
    public JTable getjTable1() {
        return jTable1;
    }

    public void setjTable1(JTable jTable1) {
        this.jTable1 = jTable1;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Reset;
    private javax.swing.JButton creer;
    private javax.swing.JButton creer1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton requete;
    // End of variables declaration//GEN-END:variables
}
